version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: inventory-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dragon}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      # Avoid binding host port 5432 by default (may conflict with a local Postgres).
      # Map to 5433 on the host unless DB_PORT is explicitly set in the environment.
      - "${DB_PORT:-5433}:5432"
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API Service
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
      target: production
    image: inventory-backend
    container_name: inventory-backend
    restart: unless-stopped
    user: "appuser"
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database Configuration
      # Use the service name 'postgres' so the backend talks to the DB over the Docker network
      # instead of trying to reach the host's localhost (which may be running Postgres).
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-dragon}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-dragon}@postgres:5432/inventory_db
      TEST_DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-dragon}@postgres:5432/inventory_test_db

      # Application Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      DEBUG: ${DEBUG:-false}
      
      # Security Configuration
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-namanjain34710@gmail.com}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-123456789}
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      # Faster healthcheck for docker orchestration. Keep reasonable retries.
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 30s

  # Frontend Service
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      target: production
      args:
        API_URL: http://34.171.15.20:8000/api/v1
    container_name: inventory-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NODE_ENV: production
      API_URL: ${API_URL:-http://34.171.15.20:8000/api/v1}
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s

  # One-off scraper service: runs the scrape_and_store job after backend & frontend are healthy
  scraper:
    image: inventory-backend
    container_name: inventory-scraper
    user: "appuser"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - inventory-network
    entrypoint: ["/bin/sh", "-c"]
    command: ["python scripts/scrape_and_store.py"]
    restart: "no"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-dragon}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-dragon}@postgres:5432/inventory_db
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads

  # Optional: pgAdmin for database administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: inventory-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@inventory.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-dragon}
      PGADMIN_LISTEN_PORT: 80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    networks:
      - inventory-network
    depends_on:
      - postgres
    profiles:
      - admin

# Docker Networks
networks:
  inventory-network:
    name: inventory-network
    driver: bridge

# Docker Volumes for persistent data
volumes:
  postgres_data:
    name: inventory-postgres-data
    driver: local
  pgadmin_data:
    name: inventory-pgadmin-data
    driver: local
  backend_logs:
    name: inventory-backend-logs
    driver: local
  backend_uploads:
    name: inventory-backend-uploads
    driver: local