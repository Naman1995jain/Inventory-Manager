name: CI/CD Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set lowercase repository owner for GHCR
      - name: Set lowercase repository owner
        id: lowercase
        run: |
          lower_owner=$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')
          echo "owner=$lower_owner" >> $GITHUB_OUTPUT
          echo "Lowercase owner: $lower_owner"

      # 3️⃣ Login to GitHub Container Registry
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4️⃣ Build & push Backend Docker image
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Backend
          push: true
          tags: ghcr.io/${{ steps.lowercase.outputs.owner }}/inventory-backend:latest
          target: production

      # 5️⃣ Build & push Frontend Docker image
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          push: true
          tags: ghcr.io/${{ steps.lowercase.outputs.owner }}/inventory-frontend:latest
          target: production
          build-args: |
            API_URL=${{ secrets.API_URL }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1️⃣ Checkout repository (optional)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup SSH Key and test connection
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          # Save private key from secret and remove any Windows line endings
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Add server to known_hosts to avoid host verification prompt
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

          # Test SSH connection
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection works!'"
        shell: bash

      # 3️⃣ Copy docker-compose.yml and .env to server
      - name: Copy docker-compose files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,.env"
          target: "/home/${{ secrets.SERVER_USER }}/inventory-manager"

      # 4️⃣ Deploy using SSH
      - name: Deploy to Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SERVER_USER }}/inventory-manager

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest Docker images
            docker-compose pull

            # Start containers
            docker-compose up -d --remove-orphans

            # Optional: prune old images
            docker image prune -f

            # Show container status
            docker ps -a
