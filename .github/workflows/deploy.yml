name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3️⃣ Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4️⃣ Clean Docker to free space before build
      - name: Clean Docker
        run: |
          docker system prune -af
          docker volume prune -f

      # 5️⃣ Build and push Docker images
      - name: Build and push Docker images
        run: |
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      # 6️⃣ Setup SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # 7️⃣ Deploy to server
      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/id_ed25519 ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /Inventory-Manager || exit

            # Clean Docker on server to free space
            echo "Cleaning Docker on server..."
            docker system prune -af
            docker volume prune -f

            # Pull latest images
            echo "Pulling latest images..."
            docker compose pull

            # Stop existing containers
            echo "Stopping existing containers..."
            docker compose down

            # Start new containers
            echo "Starting containers..."
            docker compose up -d

            echo "Deployment completed!"
          EOF
